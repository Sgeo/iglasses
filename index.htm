<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>i-Glasses emulator</title>

  <style>
    canvas  {
      width: 640px;
      height: 400px;
    }
  </style>
</head>

<body>
  <canvas id="jsdos"></canvas>
  

  <canvas id="webgl"></canvas>
  </body>
  
  
    <script id="vs" type="notjs">#version 300 es
in vec4 position;

void main() {
  gl_Position = position;
}
  </script>
  <script id="fs" type="notjs">#version 300 es

  
precision mediump float;

uniform vec2 resolution;
uniform sampler2D jsdos;

out vec4 fragColor;

void main() {
  vec2 uv = gl_FragCoord.xy / resolution.xy;
  
  ivec2 coords = ivec2(uv * vec2(textureSize(jsdos, 0)));
  coords.x *= 2;
  coords.y = coords.y/2*2; // Round down to even y coordinate.
  
  coords = coords%textureSize(jsdos, 0);
  
  // 0 being bottom means 0 and all even pixel rows are the right size of the image.
  // So if we're on the left, offset by 1 to get odd pixels.
  
  coords.y += 1 - int(step(0.5, uv.x));

  fragColor = texelFetch(jsdos, coords, 0);
}
  </script>
  <script src="twgl.min.js"></script>
  <script>
    "use strict";
    const gl = document.querySelector("#webgl").getContext("webgl2");
    const programInfo = twgl.createProgramInfo(gl, ["vs", "fs"]);

    const arrays = {
      position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0],
    };
	const jsdosCanvas = document.querySelector("#jsdos");
    const bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);

    function render(time) {
      twgl.resizeCanvasToDisplaySize(gl.canvas);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
	  const jsdosTexture = twgl.createTexture(gl, { src: jsdosCanvas });

      const uniforms = {
        resolution: [gl.canvas.width, gl.canvas.height],
		jsdos: jsdosTexture
      };

      gl.useProgram(programInfo.program);
      twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);
      twgl.setUniforms(programInfo, uniforms);
      twgl.drawBufferInfo(gl, bufferInfo);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  </script>
    <script src="js-dos.js"></script>
	  <script>
    Dos(document.getElementById("jsdos"), { 
        wdosboxUrl: "wdosbox.js" 
    }).ready((fs, main) => {
      fs.extract("grid.zip").then(() => {
        main(["-c", "GRID.EXE -t"])
      });
    });
  </script>


</html>