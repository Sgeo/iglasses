<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>i-Glasses emulator</title>

  <style>
    #jsdos  {
      width: 640px;
      height: 400px;
    }
    #webgl  {
      width: 1280px;
      height: 400px;
    }
  </style>
</head>

<body>
  <canvas id="jsdos"></canvas>
  
  <label for="antifilter">Antifilter (experimental):</label><input id="antifilter" type="checkbox">

  <canvas id="webgl"></canvas>
  <button id="fullscreen">Fullscreen</button>
  <button id="webxr-button" disabled>WebXR (under construction)</button>
  
  
  
    <script id="vs" type="notjs">#version 300 es
in vec4 position;
in vec2 uv;
out vec2 uvV;
uniform mat4 projection;

void main() {
  uvV = uv;
  gl_Position = projection * position;
}
  </script>
  <script id="fs" type="notjs">#version 300 es

  
precision mediump float;

in vec2 uvV;

uniform sampler2D jsdos;
uniform int side;

out vec4 fragColor;

void main() {
  vec2 uv = uvV;
  
  ivec2 coords = ivec2(uv * vec2(textureSize(jsdos, 0)));
  coords.y = coords.y/2*2; // Round down to even y coordinate.
  
  coords = coords%textureSize(jsdos, 0);
  
  // 0 being bottom means 0 and all even pixel rows are the right size of the image.
  // So if we're on the left, offset by 1 to get odd pixels.
  
  
  coords.y += 1 - side;
  

  fragColor = texelFetch(jsdos, coords, 0);
  //fragColor = texelFetch(jsdos, ivec2(0, 0), 0);
}
  </script>
  <script src="twgl-full.min.js"></script>
  <script>
    const IGLASSES_FOV = {
        downDegrees: 30,
        upDegrees: 30,
        leftDegrees: 30,
        rightDegrees: 30
    };
    const IGLASSES_FOV_TAN = {
        down: Math.tan(IGLASSES_FOV.downDegrees * Math.PI/180)*(3/4),
        up: Math.tan(IGLASSES_FOV.upDegrees * Math.PI/180)*(3/4),
        left: Math.tan(IGLASSES_FOV.leftDegrees * Math.PI/180),
        right: Math.tan(IGLASSES_FOV.rightDegrees * Math.PI/180)
    };
  </script>
  <script>
    "use strict";
    const gl = document.querySelector("#webgl").getContext("webgl2", {xrCompatible: true});
    const programInfo = twgl.createProgramInfo(gl, ["vs", "fs"]);
    let left = IGLASSES_FOV_TAN.left;
    let right = IGLASSES_FOV_TAN.right;
    let up = IGLASSES_FOV_TAN.up;
    let down = IGLASSES_FOV_TAN.down;

    const arrays = {
      position: [
      -left, -down, -1,
      right, -down, -1,
      -left, up, -1,
      -left, up, -1,
      right, -down, -1,
      right, up, -1],
      uv: {numComponents: 2, data: [
        0, 0,
        1, 0,
        0, 1,
        0, 1,
        1, 0,
        1, 1
      ]}
    };
    const jsdosCanvas = document.querySelector("#jsdos");
    const bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

    function render(time, frame) {
      let vr = window.xrSession && frame;
      let pose = null;
      if(vr) {
        pose = frame.getViewerPose(xrReferenceSpace);
        if(!pose) vr=false;
      }
      if(vr) {
        window.latestPose = pose; // Used by the tracker. Needs to be cleaned up
        gl.bindFramebuffer(gl.FRAMEBUFFER, xrSession.renderState.baseLayer.framebuffer);
      } else {
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }
      twgl.resizeCanvasToDisplaySize(gl.canvas);
      
      
      const jsdosTexture = twgl.createTexture(gl, { src: jsdosCanvas });

      
      
      let projection;
      if(vr) {
        let viewport = xrSession.renderState.baseLayer.getViewport(pose.views[0]);
        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
        projection = pose.views[0].projectionMatrix;
      } else {
        gl.viewport(0, 0, gl.canvas.width/2, gl.canvas.height);
        projection = twgl.m4.identity();
      }
      const uniforms = {
        jsdos: jsdosTexture,
        side: 0,
        projection: projection
      };

      gl.useProgram(programInfo.program);
      twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);
      twgl.setUniforms(programInfo, uniforms);
      twgl.drawBufferInfo(gl, bufferInfo);
      
      if(vr) {
        let viewport = xrSession.renderState.baseLayer.getViewport(pose.views[1]);
        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
        projection = pose.views[1].projectionMatrix;
        twgl.setUniforms(programInfo, {projection: projection});
      } else {
        gl.viewport(gl.canvas.width/2, 0, gl.canvas.width/2, gl.canvas.height);
      }
      twgl.setUniforms(programInfo, {side: 1});
      twgl.drawBufferInfo(gl, bufferInfo);
      if(window.xrSession) {
        xrSession.requestAnimationFrame(render);
      } else {
        requestAnimationFrame(render);
      }
      
    }
    requestAnimationFrame(render);
  </script>
    <script type="text/javascript" src="browserfs.min.js"></script>
    <script type="text/javascript" src="loader.js"></script>
    <script type="text/javascript" src="tracker.js"></script>
    <script type="text/javascript">
      var emulator = new Emulator(document.querySelector("#jsdos"),
                                  null,
                                  new DosBoxLoader(DosBoxLoader.emulatorJS("dosbox.wasm.js"),
                                                   DosBoxLoader.emulatorWASM("dosbox.wasm"),
                                                   DosBoxLoader.locateAdditionalEmulatorJS(locateAdditionalFiles),
                                                   DosBoxLoader.nativeResolution(640, 400),
                                                   DosBoxLoader.mountZip("c",
                                                                         DosBoxLoader.fetchFile("Game File",
                                                                                                "grid.zip")),
                                                   DosBoxLoader.mountFile("dosbox.conf", DosBoxLoader.localFile("DosBox.conf", "[serial]\nserial1=nullmodem server:tracker.invalid port:8000 transparent:1 telnet:0")),
                                                   DosBoxLoader.startExe(""),
                                                   DosBoxLoader.extraArgs(["-conf", "dosbox.conf"])));
                                                   
      emulator.setCallbacks({
        before_run: function() {
          var tracker = new Tracker();
		  document.querySelector("#antifilter").addEventListener("change", function(e) {
			tracker.use_antifilter = this.checked;
		  }, false);
          tracker.install(SOCKFS);
          Module['websocket']['on']('error', function(error) {console.log('Socket error ' + error);});
        }
      });
      emulator.start({ });
      function locateAdditionalFiles(filename) {
        return filename;
      }
    </script>
    <script type="text/javascript">
    
    document.querySelector("#fullscreen").addEventListener("click", function(e) {
        document.querySelector("#webgl").requestFullscreen();
    });
    
    if(navigator.xr) {
        navigator.xr.isSessionSupported("immersive-vr").then(supported => {
            if(supported) document.querySelector("#webxr-button").disabled = false;
        });
    }
    
    document.querySelector("#webxr-button").addEventListener("click", async function(e) {
		    document.querySelector("#jsdos").requestPointerLock();
        let webglCanvas = document.querySelector("#webgl");
        let gl = webglCanvas.getContext("webgl2", {xrCompatible: true});
        window.xrSession = await navigator.xr.requestSession("immersive-vr");
        window.xrSession.addEventListener("end", () => {
          window.xrSession = null;
        });
        window.xrReferenceSpace = await xrSession.requestReferenceSpace("local");
        let xrLayer = new XRWebGLLayer(window.xrSession, gl);
        window.xrSession.updateRenderState({baseLayer: xrLayer});
    });
  </script>
</body>

</html>